---
  - name: Test login in as current/configured user
    local_action: shell ssh {{ ssh_extra_args }} {{ inventory_hostname }} whoami
    ignore_errors: true
    always_run: true
    changed_when: login_as_self.rc is not defined
    register: login_as_self

  - name: Use root to login
    set_fact: remote_user="root" should_become=false
    always_run: true
    failed_when: login_as_self.rc is not defined
    when: login_as_self.rc != 0

  - name: Use current/configured user to log in
    set_fact: remote_user="{{ login_as_self.stdout_lines[0] }}" should_become=true
    always_run: true
    failed_when: login_as_self.rc is not defined
    when: login_as_self.rc == 0

  # Run the rest as remote_user
  - block:
    - name: Gather facts, we know the username now
      setup:

    - name: Create admin group
      group: "name={{admingroup}}"
      register: reg_add_admin_group

    - name: Create groups from a list
      group: 
        name: "{{user.name}}"
        gid: "{{user.gid | default(omit)}}"
      register: reg_add_group
      when: admin_list_of_groups is defined and admin_list_of_groups.0 is defined
      with_items: "{{ admin_list_of_groups }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"

    - name: Install Python SE Linux support (needed on CentOS7 with Enforcing)
      package: name=libselinux-python state=present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= 7

    - name: Create sudoers file for admin group
      copy: dest=/etc/sudoers.d/{{ admingroup }} owner=root group=root mode=0440
            content='%{{ admingroup }} ALL=(ALL) NOPASSWD:ALL'
            validate='visudo -cf %s'
      register: reg_add_sudoers_file_admins
      when: admin_sudoers

    - name: Ensure /etc/sudoers.d is scanned by sudo
      lineinfile: dest=/etc/sudoers regexp="#includedir\s+/etc/sudoers.d" line="#includedir /etc/sudoers.d"
      when: admin_sudoers

    - name: Add or remove users from the adminusers and moreusers lists
      user:
        name: "{{user.name}}"
        state: "{{user.state | default('present')}}"
        uid: "{{user.uid | default(omit) }}"
        group: "{{user.group | default(omit) }}"
        groups: "{{user.groups | default(omit) }}"
        shell: "{{user.shell | default('/bin/bash')}}"
      with_items: 
       - "{{ adminusers | default([]) }}"
       - "{{ moreusers | default([]) }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"

    - name: Remove wheel group in sudoers if admin group was added and the sudoers.d file for the admin group was added
      lineinfile:
        dest: /etc/sudoers
        state: absent 
        regexp: "^%wheel"
        validate: 'visudo -cf %s'
      when: reg_add_admin_group.changed and reg_add_sudoers_file_admins.changed and admin_sudoers

      # No password. Required for sshd PasswordAuthentication no
    - name: Remove passwords from both adminusers and moreusers if adminremove_passwords is True
      user:
        name: "{{user.name}}"
        password: '*'
        state: "{{user.state | default('present')}}"
        uid: "{{user.uid | default(omit) }}"
        group: "{{user.group | default(omit) }}"
        groups: "{{user.groups | default(omit) }}"
        shell: "{{user.shell | default('/bin/bash')}}"
      with_items: 
       - "{{ adminusers | default([]) }}"
       - "{{ moreusers | default([]) }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"
      when: adminremove_passwords

    - name: Add ssh keys and use key_options if option is used
      authorized_key: user="{{user.name}}" key='{{user.pubkey}}' key_options='{{ user.options | default(omit) }}'
      when: user.state == 'present' and user.pubkey is defined
      with_items: 
       - "{{ adminusers | default([]) }}"
       - "{{ moreusers | default([]) }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"

    - name: Add or remove ssh keys to root user
      authorized_key: 
        user: "root" 
        key: '{{user.pubkey}}'
        state: "{{user.state | default('present')}}"
      when: user.pubkey is defined
      with_items: "{{ admin_root_keys | default([]) }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"

    # end of block
    remote_user: "{{ remote_user }}"
    become: "{{ should_become }}"
