---
# This role no longer needs to be run with gather_facts disabled (as long as
# you have a working user account
  - name: Test login as current/configured user if fact checking is disabled
    local_action: shell ssh {{ssh_extra_args}} {{inventory_hostname}} whoami
    become: no # We don't want to run as root here
    check_mode: no
    changed_when: false # This never changes anything
    register: login_as_self
    failed_when: # The ssh failure doesn't always imply a failure of this role
      - "login_as_self | failed"
      - "login_as_self.stderr | search('WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!')"

  - name: Use bootstrap_user to login if current/configured user failed or if fact checking is disabled
    set_fact:
      ansible_ssh_user: "{{ bootstrap_user }}"
    check_mode: no
    when:
      - login_as_self is defined
      - login_as_self.rc != 0

  - name: Use the current/configured username
    set_fact:
      ansible_ssh_user: "{{ login_as_self.stdout }}"
    when:
      - ansible_ssh_user is undefined

    # This list includes the user used to ssh into the system
  - name: command - grab a space separated string of users with the users linux command
    command: users
    check_mode: no
    changed_when: false # This never changes anything
    register: reg_ansible_logged_in_users

  - name: set a fact an ansible list of unique and logged in users
    check_mode: no
    changed_when: false # This never changes anything
    set_fact:
      admin_logged_in_users: "{{ reg_ansible_logged_in_users.stdout.split(' ')|unique }}"

  # Keep this block to avoid ugly diff
  - block:
    - name: Gather facts if we didn't already, we know the username now
      setup:
      when: ansible_fqdn is undefined

    - name: Create admin group
      group: "name={{admingroup}}"
      register: reg_add_admin_group

    - name: Create groups from a list
      group:
        name: "{{group.name}}"
        gid: "{{group.gid | default(omit)}}"
      register: reg_add_group
      when: admin_list_of_groups is defined and admin_list_of_groups.0 is defined
      with_items: "{{ admin_list_of_groups }}"
      loop_control:
        loop_var: group
        label: "{{ group.name }}"

    - name: Install Python SE Linux support (needed on CentOS7 with Enforcing)
      package:
        name: libselinux-python
        state: present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= 7

    - name: Create sudoers file for admin group
      copy:
        dest: "/etc/sudoers.d/{{admingroup}}"
        owner: "root"
        group: "root"
        mode: 0440
        content: '%{{admingroup}} ALL=(ALL) NOPASSWD:ALL'
        validate: 'visudo -cf %s'
      register: reg_add_sudoers_file_admins
      when: admin_sudoers

    - name: Ensure /etc/sudoers.d is scanned by sudo
      lineinfile:
        dest: '/etc/sudoers'
        regexp: '#includedir\s+/etc/sudoers.d'
        line: '#includedir /etc/sudoers.d'
      when: admin_sudoers

    - name: Add or remove users from the lists in admin_list_of_user_lists
      user:
        name: "{{user.name}}"
        state: "{{user.state | default('present')}}"
        uid: "{{user.uid | default(omit)}}"
        group: "{{user.group | default(omit)}}"
        groups: "{{user.groups | default(omit)}}"
        shell: "{{user.shell | default('/bin/bash')}}"
        comment: "{{user.comment | default(omit)}}"
        remove: "{{user.remove | default(omit)}}"
        # Don't change password after first run.
        # Work around for:
        # "update_password is always but a password value is missing"
        update_password: on_create
      with_items: "{{ admin_list_of_user_lists | default([]) }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }} {{ user.state }}"
      when:
        # Ansible user module and usermod command fail to modify any logged in user when uid is set
        # Workaround is to run usermod manually for logged in users and not set UID even if it is defined
        - user.uid is not defined or (user.uid is defined and user.name not in admin_logged_in_users)

    - name: command usermod - primary group and extra groups, workaround for logged in users
      command: sudo usermod -g {{ user.group }} -G {{ user.groups }} {{ user.name }}
      with_items: "{{ admin_list_of_user_lists | default([]) }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"
      when:
       - user.name in admin_logged_in_users
       - user.group is defined
       - user.groups is defined
       - user.uid is defined # We only need this usermod command to set group and groups for any logged in users

    # An extra exception if the group key is not defined for the logged in user
    - name: command usermod - extra groups, workaround for logged in user
      command: sudo usermod -G {{ user.groups }} {{ user.name }}
      with_items: "{{ admin_list_of_user_lists | default([]) }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"
      when:
       - user.name in admin_logged_in_users
       - user.group is undefined
       - user.groups is defined

    - name: Remove wheel group in sudoers if admin group was added and the sudoers.d file for the admin group was added
      lineinfile:
        dest: /etc/sudoers
        state: absent
        regexp: "^%wheel"
        validate: 'visudo -cf %s'
      when: reg_add_admin_group.changed and reg_add_sudoers_file_admins.changed and admin_sudoers

    # No password. Required for sshd PasswordAuthentication no
    - name: Remove passwords from present users if adminremove_passwords is True
      user:
        name: "{{user.name}}"
        password: '*'
        state: "{{user.state | default('present')}}"
      with_items: "{{ admin_list_of_user_lists | default([])}}"
      when:
        - adminremove_passwords
        - user.state == 'present'
      loop_control:
        loop_var: user
        label: "{{ user.name }}"

    - name: Add or remove ssh keys and use key_options if option is used
      authorized_key:
        user: "{{user.name}}"
        key: '{{user.pubkey}}'
        key_options: '{{user.options | default(omit)}}'
        state: "{{user.key_state | default(omit)}}"
      when: user.state == 'present' and user.pubkey is defined
      with_items: "{{ admin_list_of_user_lists | default([]) }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"

    - name: Add to or remove ssh keys from root user
      authorized_key:
        user: "root"
        key: '{{akey.pubkey}}'
        state: "{{akey.state | default('present')}}"
      when: akey.pubkey is defined
      with_items: "{{ admin_root_keys | default([]) }}"
      loop_control:
        loop_var: akey
        label: "{{ akey.pubkey }}"
        # use a loop_var that is not the same as a parameter of the module (key)

    become: yes
    # End of block
